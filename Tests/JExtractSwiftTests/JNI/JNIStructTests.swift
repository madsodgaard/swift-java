//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2025 Apple Inc. and the Swift.org project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Swift.org project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import JExtractSwiftLib
import Testing

@Suite
struct JNIStructTests {
  let source = """
    public struct MyStruct {
      let x: Int64
      let y: Int64
  
      public init(x: Int64, y: Int64) {
        self.x = y
        self.y = y
      }
  
      public func doSomething(x: Int64) {}
    }
  """

  @Test
  func generatesJavaClass() throws {
    try assertOutput(input: source, .jni, .java, expectedChunks: [
      """
      // Generated by jextract-swift
      // Swift module: SwiftModule

      package com.example.swift;
      
      import org.swift.swiftkit.core.*;
      import org.swift.swiftkit.core.util.*;

      public final class MyStruct extends JNISwiftInstance {
        static final String LIB_NAME = "SwiftModule";
      
        @SuppressWarnings("unused")
        private static final boolean INITIALIZED_LIBS = initializeLibs();
        static boolean initializeLibs() {
          System.loadLibrary(LIB_NAME);
          return true;
        }
      
        public MyStruct(long selfPointer, SwiftArena swiftArena) {
          super(selfPointer, swiftArena);
        }
      """,
      """
      private static native void $destroy(long selfPointer);
      """,
      """
      @Override
      protected Runnable $createDestroyFunction() {
        long $selfPointer = this.pointer(); 
        return new Runnable() {
          @Override
          public void run() {
            MyStruct.$destroy($selfPointer);
          }
        };
      }
      """
    ])
  }

  @Test
  func initializer_javaBindings() throws {
    try assertOutput(
      input: source,
      .jni,
      .java,
      expectedChunks: [
        """
        /**
          * Downcall to Swift:
          * {@snippet lang=swift :
          * public init(x: Int64, y: Int64)
          * }
          */
        public static MyStruct init(long x, long y, SwiftArena swiftArena$) {
          long selfPointer = MyStruct.allocatingInit(x, y);
          return new MyStruct(selfPointer, swiftArena$);
        }
        """,
        """
        private static native long allocatingInit(long x, long y);
        """,
      ]
    )
  }

  @Test
  func initializer_swiftThunks() throws {
    try assertOutput(
      input: source,
      .jni,
      .swift,
      detectChunkByInitialLines: 1,
      expectedChunks: [
        """
        @_cdecl("Java_com_example_swift_MyStruct_allocatingInit__JJ")
        func Java_com_example_swift_MyStruct_allocatingInit__JJ(environment: UnsafeMutablePointer<JNIEnv?>!, thisClass: jclass, x: jlong, y: jlong) -> jlong {
          let selfPointer = UnsafeMutablePointer<MyStruct>.allocate(capacity: 1)
          selfPointer.initialize(to: MyStruct(x: Int64(fromJNI: x, in: environment!), y: Int64(fromJNI: y, in: environment!)))
          return Int64(Int(bitPattern: selfPointer)).getJNIValue(in: environment)
        }
        """
      ]
    )
  }

  @Test
  func destroyFunction_swiftThunks() throws {
    try assertOutput(
      input: source,
      .jni,
      .swift,
      detectChunkByInitialLines: 1,
      expectedChunks: [
        """
        @_cdecl("Java_com_example_swift_MyStruct__00024destroy__J")
        func Java_com_example_swift_MyStruct__00024destroy__J(environment: UnsafeMutablePointer<JNIEnv?>!, thisClass: jclass, selfPointer: jlong) {
          let pointer = UnsafeMutablePointer<MyStruct>(bitPattern: Int(Int64(fromJNI: selfPointer, in: environment!)))!
          pointer.deinitialize(count: 1)
          pointer.deallocate()
        }
        """
      ]
    )
  }

  @Test
  func memberMethod_javaBindings() throws {
    try assertOutput(
      input: source,
      .jni,
      .java,
      expectedChunks: [
        """
        /**
          * Downcall to Swift:
          * {@snippet lang=swift :
          * public func doSomething(x: Int64)
          * }
          */
        public void doSomething(long x) {
          long selfPointer = this.pointer();
          MyStruct.$doSomething(x, selfPointer);
        }
        """,
        """
        private static native void $doSomething(long x, long selfPointer);
        """
      ]
    )
  }

  @Test
  func memberMethod_swiftThunks() throws {
    try assertOutput(
      input: source,
      .jni,
      .swift,
      detectChunkByInitialLines: 1,
      expectedChunks: [
        """
        @_cdecl("Java_com_example_swift_MyStruct__00024doSomething__JJ")
        func Java_com_example_swift_MyStruct__00024doSomething__JJ(environment: UnsafeMutablePointer<JNIEnv?>!, thisClass: jclass, x: jlong, selfPointer: jlong) {
          let self$ = UnsafeMutablePointer<MyStruct>(bitPattern: Int(Int64(fromJNI: selfPointer, in: environment!)))!
          self$.pointee.doSomething(x: Int64(fromJNI: x, in: environment!))
        }
        """,
      ]
    )
  }
}
